buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.yaml:snakeyaml:1.29'  // SnakeYAML 라이브러리 추가(.yml에서 정보를 가져오기 위해)
    }
}

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.yaml.snakeyaml.Yaml

plugins {
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.jetbrains.kotlin.jvm' version '1.9.23'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.23'
    id 'nu.studer.jooq' version '6.0.1' //jooq를 사용하기 위해서 필요
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
    implementation 'org.springframework.cloud:spring-cloud-starter'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    //Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.0.4'
    //implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:1.7.0'
    //spring boot 3.X 버전에서는 밑어꺼 사용 불가
//    implementation 'io.springfox:springfox-boot-starter:3.0.0'  // Springfox Swagger 의존성 추가
//    implementation 'io.springfox:springfox-swagger-ui:3.0.0' // Swagger UI 의존성 추가
    //spring cloud config로 부터 설정 정보를 (동적으로)받아오기 위해서 필요
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
    //implementation 'org.springframework.cloud:spring-cloud-bus'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    //kafka 의존성 추가
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb:r2dbc-mariadb:1.1.3'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    jooqGenerator 'org.mariadb.jdbc:mariadb-java-client'
    jooqGenerator 'org.jooq:jooq-kotlin:3.14.4'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'

    //classpath 'org.yaml:snakeyaml:1.29'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

//application.yml에서 정보를 가져오기 위해 설정
def loadYaml(String path) {
    def yaml = new Yaml()
    def inputStream = new FileInputStream(new File(path))
    def data = yaml.load(inputStream) as Map
    return data
}
def application = loadYaml('src/main/resources/application.yml')

println "DB URL: ${System.getenv('DB_URL')}"

jooq {
    version = '3.17.5'
    edition = nu.studer.gradle.jooq.JooqEdition.OSS

    configurations {
        create("main") {
            generateSchemaSourceOnCompilation = true

            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.mariadb.jdbc.Driver'
                    url = System.getenv('DB_URL')
                    user = System.getenv('DB_USER')
                    password = System.getenv('DB_PASSWORD')
                    //properties.add(new Property().withKey('ssl').withValue('false'))
                }
                generator {
                    database {
                        name = 'org.jooq.meta.mariadb.MariaDBDatabase' // Updated for MariaDB
                        inputSchema = 'fluffit_flupet' // Ensure this matches your MariaDB schema
                    }
                    target {
                        packageName = 'com.ssafy.jooq'
                        directory = 'src/main/generated'
                    }
                    strategy {
                        name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                    }
                }
            }
        }
    }
}

//jooq {
//    version = '3.17.5'
//    edition = nu.studer.gradle.jooq.JooqEdition.OSS
//    configurations {
//        main {
//            generationTool {
//                logging = org.jooq.meta.jaxb.Logging.WARN
//                generator {
//                    name = 'org.jooq.codegen.DefaultGenerator'
//                    strategy {
//                        name = 'org.jooq.codegen.DefaultGeneratorStrategy'
//                    }
//                    database {
//                        name = 'org.jooq.meta.mariadb.MariaDBDatabase'
//                        inputSchema = 'flupet_service'
//                    }
//                    generate {
//                        deprecated = false
//                        records = true
//                        immutablePojos = true
//                        fluentSetters = true
//                    }
//                    target {
//                        packageName = 'com.ssafy.jooq'
//                        directory = 'build/generated-src/jooq'
//                    }
//                }
//            }
//        }
//    }
//}

//jooq {
//    version = '3.17.5'
//    edition = nu.studer.gradle.jooq.JooqEdition.OSS
//    configurations {
//        main {
//            generateSchemaSourceOnCompilation = true
//            //logging = org.jooq.meta.jaxb.Logging.WARN
//            generator {
//                name = 'org.jooq.codegen.DefaultGenerator'
//                strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
//                database {
//                    name = 'org.jooq.meta.extensions.r2dbc.R2dbcDatabase'
//                    inputSchema = 'flupet_service' //schema 다시한번 확인
//                }
//                target {
//                    packageName = 'com.ssafy.fluffitflupet.generated'
//                    directory = 'src/main/kotlin'
//                }
//            }
//        }
//    }
//}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs += '-Xjsr305=strict'
        jvmTarget = '17'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
